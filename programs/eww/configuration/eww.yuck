(defwindow bar
  :monitor 0
  :geometry (geometry :width "100%"
                      :height "35px"
                      :anchor "top center")
  :exclusive true
  (bar-widget))

(defwidget bar-widget []
  (centerbox :class "eww-bar"
             :orientation "h"
    (left)
    (center)
    (right)))

(defwidget left []
  (workspaces))

(defwidget center []
  (time))

(defwidget right []
  (box :halign "end"
       :orientation "h"
       :space-evenly false
       :spacing 10
    (power)
    (internet)
    (brightness)
    (session)))

(deflisten workspace-text
  "scripts/workspaces")
(defwidget workspaces []
  (literal :class "workspaces"
           :halign "start"
           :valign "center"
           :content workspace-text))

(defpoll time-text :interval "1s" "scripts/time-status")
(defwidget time []
  (label :text time-text
         :halign "center"))

(defpoll power-status-icon :interval "1s" "scripts/power-status icon")
(defpoll power-status-percent :interval "1s" "scripts/power-status percent")
(defwidget power []
  (label :class "icon"
         :halign "end"
         :text power-status-icon
         :tooltip power-status-icon))

;; (defpoll brightness-text :interval "1s" "scripts/brightness")
;; (defwidget brightness []
;;   (scale :min 0
;;          :class "brightness-slider"
;;          :orientation "h"
;;          :flipped false
;;          :draw-value true
;;          :max 100
;;          :value 50
;;          :halign "end"))

;; Brightness Widgets ;;
(defwidget brightness []
  (eventbox :onhover "eww update bright=true"   
            :onhoverlost "eww update bright=false"
    (box :orientation "h"
         :space-evenly "false"
         :spacing 2
      (revealer :transition "slideright"
                :reveal bright
                :duration "300ms"
        (scale :class "brightness-slider" 
               :value current-brightness 
               :tooltip "Brightness: ${current-brightness}%" 
               :onchange "brightnessctl set {}%" 
               :orientation "h" 
               :flipped true 
               :max 100
               :min 0))
      (label :class "brightness-icon" 
             :text " "))))
(defpoll current-brightness :interval "1s" "brightnessctl -m -d amdgpu_bl0 | awk -F, '{print substr($4, 0, length($4)-1)}' | tr -d '%'")
(defvar bright false)


(defwidget internet []
  (label :class "icon"
         :halign "end"
         :text " "
         :tooltip "stats"))

(defwidget session []
  (button :onclick "touch ~/clicked"
          :class "icon"
          :halign "end"
          " "))
